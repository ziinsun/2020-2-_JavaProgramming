//1210 enemy 출현



package shootGame;

import java.awt.Canvas;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Iterator;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class ShootGame {
	JFrame frame;
	int width = 800;
	int height = 600;
	CT canvas = new CT();

	Shot shot;

	ArrayList<Enemy> enemys = new ArrayList<>();
//	ArrayList<Shot> shots = new ArrayList<Shot>();
	Image dog, bond, slime;

//	Character hero = new Character(5, 5);

	int speed = 10;

	int x = 50;
	int y = 250;

	int xDirection = 0;
	int yDirection = 0;

	boolean left = false, right = false, up = false, down = false, attack = false;

	public ShootGame() {
		frame = new JFrame("슈팅게임");
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setSize(width, height);

		frame.getContentPane().add(new GamePanel());
		frame.addKeyListener(new MyKeyListener());

		frame.setVisible(true);

	}

	public void play() {
		int enCnt = 0;

		while (true) {

			x += xDirection;
			y += yDirection;

			frame.repaint();
			canvas.repaint();
			
			if (enCnt > 3000) {
				enCreate();
				enCnt = 0;
			}
			enCnt+=10;

//			Iterator iter = enemys.iterator();
//
//			while (iter.hasNext()) {
//				Enemy enemy = (Enemy) iter.next();
//			}

			try {

				Thread.sleep(speed);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

		}
	} // play

	public void enCreate() {
		for (int i = 0; i < 5; i++) {
			double rx = width-100 + Math.random() * 60;
			double ry = Math.random() * (height-30);
			Enemy en = new Enemy((int) rx, (int) ry);
			enemys.add(en);
		}

	}

	private class GamePanel extends JPanel {
		public void paintComponent(Graphics g) {
			super.paintComponent(g);

//			g.setColor(Color.pink);
//			g.fillRect(x, y, 20, 20);

			g.drawImage(dog, x, y, 80, 80, this);
//			g.setColor(Color.green);

			for (int i = 0; i < enemys.size(); i++) {
				Enemy e = (Enemy) enemys.get(i);
//				g.fillRect(e.x, e.y, e.width, e.height);
				g.drawImage(slime, e.x, e.y, 50, 50, this);
//				if (e.x <= 20)
//					enemys.remove(i);
				e.moveEn();
			}
			
		}
	} // JPanel

	private class MyKeyListener implements KeyListener {

		@Override
		public void keyTyped(KeyEvent e) {
			// TODO Auto-generated method stub

		}

		@Override
		public void keyPressed(KeyEvent e) {
			// TODO Auto-generated method stub
			switch (e.getKeyCode()) {
			case KeyEvent.VK_UP:
				yDirection = -2;
				xDirection = 0;
				break;
			case KeyEvent.VK_DOWN:
				yDirection = 2;
				xDirection = 0;
				break;
			case KeyEvent.VK_LEFT:
				xDirection = -2;
				yDirection = 0;
				break;
			case KeyEvent.VK_RIGHT:
				xDirection = 2;
				yDirection = 0;
				break;
			case KeyEvent.VK_SPACE:
				attack = true;
				break;
			}

		}

		@Override
		public void keyReleased(KeyEvent e) {
			// TODO Auto-generated method stub
			switch (e.getKeyCode()) {
			case KeyEvent.VK_UP:
				yDirection = 0;
				xDirection = 0;
				break;
			case KeyEvent.VK_DOWN:
				yDirection = 0;
				xDirection = 0;
				break;
			case KeyEvent.VK_LEFT:
				xDirection = 0;
				yDirection = 0;
				break;
			case KeyEvent.VK_RIGHT:
				xDirection = 0;
				yDirection = 0;
				break;
			case KeyEvent.VK_SPACE:
				attack = false;
				break;
			}

		}

	} // key

	private class CT extends Canvas {
		public CT() {
			dog = Toolkit.getDefaultToolkit().getImage("src/image/개.png");
			bond = Toolkit.getDefaultToolkit().getImage("src/image/뼈.png");
			slime = Toolkit.getDefaultToolkit().getImage("src/image/슬라임.png");
		}
	} // canvas
}
